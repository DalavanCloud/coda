1.4.1 2010-12-01
~~~~~~~~~~~~~~~~

* CODA can now be build using MSYS/MinGW on Windows.

* Fixed issue with GRIB backend on systems that require strict word alignment.

* Added support for GRIB files with spacing between the GRIB messages. 

1.4.0 2010-11-08
~~~~~~~~~~~~~~~~

* Added support for reading of GRIB1 and GRIB2 formatted data. Support is
  currently limited to data stored with simple packing and using a lat/lon or
  Gaussian grid.

* Added public C API for creating and evaluating CODA expressions.
  A wrapper interface is available for Fortran, Python, and Java.

* Added regex functions to CODA expression language. The functions use PCRE,
  which is now included with CODA, to evaluate the regular expressions.

* Added support for raw strings (i.e. strings where the escape sequences are
  not evaluated by CODA) in the expression language. A raw string starts with
  'r' (similar to Python): r"no \\escaping\\" -> "no \\escaping\\"

* Added codaeval command line tool to verify and evaluate CODA expressions.

* Added new time functions to the C interface (with Fortran, Python, and Java
  wrappers) that can deal with leap seconds (they convert between TAI and UTC):
  coda_utcdatetime_to_double(), coda_double_to_utcdatetime(),
  coda_time_to_utcstring(), coda_utcstring_to_time()

* C interface types coda_ProductFile, coda_Type, and coda_Cursor are now called
  coda_product, coda_type, and coda_cursor. Defines are still available for the
  old type names to allow backward compatibility.

* Added coda_type_get_record_field_real_name().

* Added coda_set_definition_path_conditional().

* codadump no longer shows execution time information for HDF4 export.
  The list view of codadump also does not quote the type names anymore.

* Fixed error handling of Python coda.string_to_time() function.

* Added variant of unboundindex() expression function that can take an explicit
  termination condition as third argument.

* Windows build of CODA is now performed using Visual Studio 2008 (9.0).
  The MATLAB build on Windows now requires MATLAB R2007b or later.

1.3.6 2010-06-11
~~~~~~~~~~~~~~~~

* Fixes in CMake build files for big-endian systems.

1.3.5 2010-05-10
~~~~~~~~~~~~~~~~

* Added support for reading of 24, 40, 48, and 56 bit little endian integers.

1.3.4 2010-04-02
~~~~~~~~~~~~~~~~

* Fixes in CMake build files.

1.3.3 2010-03-19
~~~~~~~~~~~~~~~~

* Fixed small issue in html documentation generation (wrong byte end-position 
  for a detection expression).

* Fixed bug in parsing of string constants in expression language (string
  constants can now end with an escaped backslash '\\').

1.3.2 2010-01-08
~~~~~~~~~~~~~~~~

* NetCDF backend now attaches attributes to the array type instead of the 
  array element type for netCDF variables.

* Fixed memory leaks in HDF5 backend.

* Special SDSVar and CoordVar SDSs are now properly hidden when accessing HDF4
  products.

* Error handling was improved for a few special cases.

1.3.1 2009-09-25
~~~~~~~~~~~~~~~~

* Added Java interface.

* CODA expression 'length' now also works on 'node' expressions.

* Fixed behavior of coda_cursor_read_bits() when the bit_length argument is 0.

* Added support for reading of arrays of basic types for XML products where
  the array is not an ASCII (space separated) array, but each ASCII value is
  stored in a separate XML element.

1.3.0 2009-07-17
~~~~~~~~~~~~~~~~

* Added built-in netCDF backend for accessing netCDF3 32-bit and 64-bit data
  formats (reading of netCDF data is no longer performed via the HDF4 library).

* scale_factor/add_offset conversion for HDF4 SDS data is now also applied
  if the scale_factor and/or add_offset attributes are provided as FLOAT32
  (and not only if they are provided as FLOAT64).

* Fixed coda.string_to_time() return value mapping in Python interface.

* Fixed issue with parsing of microsecond information from ascii EPS time
  string values.

* Fixed fetching of array of raw byte data in IDL interface.

1.2.3 2009-06-10
~~~~~~~~~~~~~~~~

* coda_get_product_format() now properly returns coda_format_ascii for ascii
  files.

* Removed -t (totals) option of codacheck.

* Added coda_str64() and coda_str64u() to the C interface to support printing
  of 64 bit values on 32-bit platforms where printf does not support %lld.

* Fixed issue that could prevent CODA from working correctly on systems that are
  picky about having variables aligned on 32 or 64 memory boundaries.

1.2.2 2009-05-08
~~~~~~~~~~~~~~~~

* CODA expression 'if' now also works with boolean typed 2nd and 3rd argument.

* CODA expression to read 'raw' data now properly reads the number of required
  bits (and not any padding bits that could be in the sequence of the rounded
  up number of bytes).
  The same issue was also fixed in codacheck and codadump.

* codacheck now checks the file size of a product in number of bits instead of
  rounded up number of bytes (i.e. undefined spare bits at the end of a product
  is now considered an error).

* Binary signed integers in CODA definitions are no longer limited to a
  multiple of 8 bits.

* It is now possible to define 'fixed values' in format definitions for data
  that is not a rounded number of bytes.

* Solved several compiler warnings regarding 64-bit support.

* codacmp now escapes 'unprintable characters' when printing differences in
  'raw' data.

* Fixed name of coda.get_product_format() in Python interface.

1.2.1 2009-03-01
~~~~~~~~~~~~~~~~

* Fixed '|' and '&' usage in CODA expressions.

1.2.0 2009-02-20
~~~~~~~~~~~~~~~~

* The Python interface of CODA now uses numpy instead of numarray.

* The codadd command line tool now has a 'list' mode to inspect available
  format definitions.

* Fixed support for HDF5 datasets containing variable length strings.

* Added support for coda_format_netcdf and coda_format_cdf as official formats.
  CODA will however (still) use the HDF4 backend to read data from these files.
  Note that coda_format_netcdf only referes to pre-4.0 NetCDF formatted files.
  NetCDF 4.0 files are in HDF5 format and will thus have coda_format_hdf5.

* Fixed issue with reading of rank-0 SDS data from HDF4 and NetCDF files.

* Fixed issue where all fieldnames in HDF4 files got called 'unnamed' and where
  reading of VData data failed.

* Changed maximum cursor depth (CODA_CURSOR_MAXDEPTH) from 16 to 32.

* Added ceil(), floor(), round(), isnan(), isinf(), ismininf(), isplusinf(),
  ltrim(), rtrim(), trim(), and unboundindex() functions and bitwise
  AND '&' and OR '|' operators to CODA expressions.

* CODA expressions now accept floating point constants in FORTRAN format
  (using a 'D' for specifying the exponent: e.g. .133000D+03)

* Various improvements to reading of .codadef files.

1.1.1 2008-10-21
~~~~~~~~~~~~~~~~

* The required zlib files are now included in the CODA package and all zlib
  functions are 'name mangled'. This solves an issue with running the CODA
  IDL interface on Linux.

1.1.0 2008-10-10
~~~~~~~~~~~~~~~~

* Fixed the following CODA expression operations
  - multiplication of floating point values
  - reading of floating point values

* CODA expressions now allow combining integer and floating point arguments
  in a floating point expression (e.g. compare integer against float, or add
  float to integer) without the need to explicitly cast the integer to a float.

* Added abs() function to CODA expressions.

* Upgraded to expat 2.0.1.

* Files with an ASCII definition are now properly marked as files with an ASCII
  format.

1.0.0 2008-09-24
~~~~~~~~~~~~~~~~

* First official release.

