# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_codac', [dirname(__file__)])
        except ImportError:
            import _codac
            return _codac
        if fp is not None:
            try:
                _mod = imp.load_module('_codac', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _codac = swig_import_helper()
    del swig_import_helper
else:
    import _codac
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


CodacError = _codac.CodacError


def version():
  return _codac.version()
version = _codac.version

def match_filefilter(*args):
  return _codac.match_filefilter(*args)
match_filefilter = _codac.match_filefilter
class Cursor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cursor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Cursor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _codac.new_Cursor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _codac.delete_Cursor
    __del__ = lambda self : None;
    def __deepcopy__(self,memo):
        return _codac.Cursor___deepcopy__(self)


    def __copy__(self):
        return _codac.Cursor___deepcopy__(self)

Cursor_swigregister = _codac.Cursor_swigregister
Cursor_swigregister(Cursor)


def cursor_read_int8_array(*args):
  return _codac.cursor_read_int8_array(*args)
cursor_read_int8_array = _codac.cursor_read_int8_array

def cursor_read_uint8_array(*args):
  return _codac.cursor_read_uint8_array(*args)
cursor_read_uint8_array = _codac.cursor_read_uint8_array

def cursor_read_int16_array(*args):
  return _codac.cursor_read_int16_array(*args)
cursor_read_int16_array = _codac.cursor_read_int16_array

def cursor_read_uint16_array(*args):
  return _codac.cursor_read_uint16_array(*args)
cursor_read_uint16_array = _codac.cursor_read_uint16_array

def cursor_read_int32_array(*args):
  return _codac.cursor_read_int32_array(*args)
cursor_read_int32_array = _codac.cursor_read_int32_array

def cursor_read_uint32_array(*args):
  return _codac.cursor_read_uint32_array(*args)
cursor_read_uint32_array = _codac.cursor_read_uint32_array

def cursor_read_int64_array(*args):
  return _codac.cursor_read_int64_array(*args)
cursor_read_int64_array = _codac.cursor_read_int64_array

def cursor_read_uint64_array(*args):
  return _codac.cursor_read_uint64_array(*args)
cursor_read_uint64_array = _codac.cursor_read_uint64_array

def cursor_read_float_array(*args):
  return _codac.cursor_read_float_array(*args)
cursor_read_float_array = _codac.cursor_read_float_array

def cursor_read_double_array(*args):
  return _codac.cursor_read_double_array(*args)
cursor_read_double_array = _codac.cursor_read_double_array

def cursor_read_char_array(*args):
  return _codac.cursor_read_char_array(*args)
cursor_read_char_array = _codac.cursor_read_char_array

def cursor_read_complex_double_pair(*args):
  return _codac.cursor_read_complex_double_pair(*args)
cursor_read_complex_double_pair = _codac.cursor_read_complex_double_pair

def cursor_read_complex_double_split_array(*args):
  return _codac.cursor_read_complex_double_split_array(*args)
cursor_read_complex_double_split_array = _codac.cursor_read_complex_double_split_array

def cursor_read_complex_double_pairs_array(*args):
  return _codac.cursor_read_complex_double_pairs_array(*args)
cursor_read_complex_double_pairs_array = _codac.cursor_read_complex_double_pairs_array

def cursor_read_complex(*args):
  return _codac.cursor_read_complex(*args)
cursor_read_complex = _codac.cursor_read_complex

def cursor_read_complex_array(*args):
  return _codac.cursor_read_complex_array(*args)
cursor_read_complex_array = _codac.cursor_read_complex_array

def cursor_read_bits(*args):
  return _codac.cursor_read_bits(*args)
cursor_read_bits = _codac.cursor_read_bits

def cursor_read_bytes(*args):
  return _codac.cursor_read_bytes(*args)
cursor_read_bytes = _codac.cursor_read_bytes

def done():
  return _codac.done()
done = _codac.done

def NaN():
  return _codac.NaN()
NaN = _codac.NaN

def PlusInf():
  return _codac.PlusInf()
PlusInf = _codac.PlusInf

def MinInf():
  return _codac.MinInf()
MinInf = _codac.MinInf

def type_get_format_name(*args):
  return _codac.type_get_format_name(*args)
type_get_format_name = _codac.type_get_format_name

def type_get_class_name(*args):
  return _codac.type_get_class_name(*args)
type_get_class_name = _codac.type_get_class_name

def type_get_native_type_name(*args):
  return _codac.type_get_native_type_name(*args)
type_get_native_type_name = _codac.type_get_native_type_name

def type_get_special_type_name(*args):
  return _codac.type_get_special_type_name(*args)
type_get_special_type_name = _codac.type_get_special_type_name

def c_index_to_fortran_index(*args):
  return _codac.c_index_to_fortran_index(*args)
c_index_to_fortran_index = _codac.c_index_to_fortran_index

def expression_get_type_name(*args):
  return _codac.expression_get_type_name(*args)
expression_get_type_name = _codac.expression_get_type_name

def expression_delete(*args):
  return _codac.expression_delete(*args)
expression_delete = _codac.expression_delete

def get_option_bypass_special_types():
  return _codac.get_option_bypass_special_types()
get_option_bypass_special_types = _codac.get_option_bypass_special_types

def get_option_perform_boundary_checks():
  return _codac.get_option_perform_boundary_checks()
get_option_perform_boundary_checks = _codac.get_option_perform_boundary_checks

def get_option_perform_conversions():
  return _codac.get_option_perform_conversions()
get_option_perform_conversions = _codac.get_option_perform_conversions

def get_option_use_fast_size_expressions():
  return _codac.get_option_use_fast_size_expressions()
get_option_use_fast_size_expressions = _codac.get_option_use_fast_size_expressions

def get_option_use_mmap():
  return _codac.get_option_use_mmap()
get_option_use_mmap = _codac.get_option_use_mmap

def isNaN(*args):
  return _codac.isNaN(*args)
isNaN = _codac.isNaN

def isInf(*args):
  return _codac.isInf(*args)
isInf = _codac.isInf

def isPlusInf(*args):
  return _codac.isPlusInf(*args)
isPlusInf = _codac.isPlusInf

def isMinInf(*args):
  return _codac.isMinInf(*args)
isMinInf = _codac.isMinInf

def expression_is_constant(*args):
  return _codac.expression_is_constant(*args)
expression_is_constant = _codac.expression_is_constant

def string_to_time(*args):
  return _codac.string_to_time(*args)
string_to_time = _codac.string_to_time

def utcstring_to_time(*args):
  return _codac.utcstring_to_time(*args)
utcstring_to_time = _codac.utcstring_to_time
CODA_MAX_NUM_DIMS = _codac.CODA_MAX_NUM_DIMS
coda_array_ordering_c = _codac.coda_array_ordering_c
coda_array_ordering_fortran = _codac.coda_array_ordering_fortran
coda_ffs_error = _codac.coda_ffs_error
coda_ffs_could_not_open_file = _codac.coda_ffs_could_not_open_file
coda_ffs_could_not_access_directory = _codac.coda_ffs_could_not_access_directory
coda_ffs_unsupported_file = _codac.coda_ffs_unsupported_file
coda_ffs_match = _codac.coda_ffs_match
coda_ffs_no_match = _codac.coda_ffs_no_match
coda_format_ascii = _codac.coda_format_ascii
coda_format_binary = _codac.coda_format_binary
coda_format_xml = _codac.coda_format_xml
coda_format_hdf4 = _codac.coda_format_hdf4
coda_format_hdf5 = _codac.coda_format_hdf5
coda_format_cdf = _codac.coda_format_cdf
coda_format_netcdf = _codac.coda_format_netcdf
coda_format_grib1 = _codac.coda_format_grib1
coda_format_grib2 = _codac.coda_format_grib2
coda_format_rinex = _codac.coda_format_rinex
coda_format_sp3 = _codac.coda_format_sp3
coda_record_class = _codac.coda_record_class
coda_array_class = _codac.coda_array_class
coda_integer_class = _codac.coda_integer_class
coda_real_class = _codac.coda_real_class
coda_text_class = _codac.coda_text_class
coda_raw_class = _codac.coda_raw_class
coda_special_class = _codac.coda_special_class
coda_special_no_data = _codac.coda_special_no_data
coda_special_vsf_integer = _codac.coda_special_vsf_integer
coda_special_time = _codac.coda_special_time
coda_special_complex = _codac.coda_special_complex
coda_native_type_not_available = _codac.coda_native_type_not_available
coda_native_type_int8 = _codac.coda_native_type_int8
coda_native_type_uint8 = _codac.coda_native_type_uint8
coda_native_type_int16 = _codac.coda_native_type_int16
coda_native_type_uint16 = _codac.coda_native_type_uint16
coda_native_type_int32 = _codac.coda_native_type_int32
coda_native_type_uint32 = _codac.coda_native_type_uint32
coda_native_type_int64 = _codac.coda_native_type_int64
coda_native_type_uint64 = _codac.coda_native_type_uint64
coda_native_type_float = _codac.coda_native_type_float
coda_native_type_double = _codac.coda_native_type_double
coda_native_type_char = _codac.coda_native_type_char
coda_native_type_string = _codac.coda_native_type_string
coda_native_type_bytes = _codac.coda_native_type_bytes
coda_expression_boolean = _codac.coda_expression_boolean
coda_expression_integer = _codac.coda_expression_integer
coda_expression_float = _codac.coda_expression_float
coda_expression_string = _codac.coda_expression_string
coda_expression_node = _codac.coda_expression_node
coda_expression_void = _codac.coda_expression_void

def init():
  return _codac.init()
init = _codac.init

def set_option_bypass_special_types(*args):
  return _codac.set_option_bypass_special_types(*args)
set_option_bypass_special_types = _codac.set_option_bypass_special_types

def set_option_perform_boundary_checks(*args):
  return _codac.set_option_perform_boundary_checks(*args)
set_option_perform_boundary_checks = _codac.set_option_perform_boundary_checks

def set_option_perform_conversions(*args):
  return _codac.set_option_perform_conversions(*args)
set_option_perform_conversions = _codac.set_option_perform_conversions

def set_option_use_fast_size_expressions(*args):
  return _codac.set_option_use_fast_size_expressions(*args)
set_option_use_fast_size_expressions = _codac.set_option_use_fast_size_expressions

def set_option_use_mmap(*args):
  return _codac.set_option_use_mmap(*args)
set_option_use_mmap = _codac.set_option_use_mmap

def datetime_to_double(*args):
  return _codac.datetime_to_double(*args)
datetime_to_double = _codac.datetime_to_double

def double_to_datetime(*args):
  return _codac.double_to_datetime(*args)
double_to_datetime = _codac.double_to_datetime

def coda_time_to_string(*args):
  return _codac.coda_time_to_string(*args)
coda_time_to_string = _codac.coda_time_to_string

def utcdatetime_to_double(*args):
  return _codac.utcdatetime_to_double(*args)
utcdatetime_to_double = _codac.utcdatetime_to_double

def coda_double_to_utcdatetime(*args):
  return _codac.coda_double_to_utcdatetime(*args)
coda_double_to_utcdatetime = _codac.coda_double_to_utcdatetime

def coda_time_to_utcstring(*args):
  return _codac.coda_time_to_utcstring(*args)
coda_time_to_utcstring = _codac.coda_time_to_utcstring

def recognize_file(*args):
  return _codac.recognize_file(*args)
recognize_file = _codac.recognize_file

def open(*args):
  return _codac.open(*args)
open = _codac.open

def open_as(*args):
  return _codac.open_as(*args)
open_as = _codac.open_as

def close(*args):
  return _codac.close(*args)
close = _codac.close

def get_product_filename(*args):
  return _codac.get_product_filename(*args)
get_product_filename = _codac.get_product_filename

def get_product_file_size(*args):
  return _codac.get_product_file_size(*args)
get_product_file_size = _codac.get_product_file_size

def get_product_format(*args):
  return _codac.get_product_format(*args)
get_product_format = _codac.get_product_format

def get_product_class(*args):
  return _codac.get_product_class(*args)
get_product_class = _codac.get_product_class

def get_product_type(*args):
  return _codac.get_product_type(*args)
get_product_type = _codac.get_product_type

def get_product_version(*args):
  return _codac.get_product_version(*args)
get_product_version = _codac.get_product_version

def get_product_definition_file(*args):
  return _codac.get_product_definition_file(*args)
get_product_definition_file = _codac.get_product_definition_file

def get_product_root_type(*args):
  return _codac.get_product_root_type(*args)
get_product_root_type = _codac.get_product_root_type

def get_product_variable_value(*args):
  return _codac.get_product_variable_value(*args)
get_product_variable_value = _codac.get_product_variable_value

def type_has_attributes(*args):
  return _codac.type_has_attributes(*args)
type_has_attributes = _codac.type_has_attributes

def type_get_format(*args):
  return _codac.type_get_format(*args)
type_get_format = _codac.type_get_format

def type_get_class(*args):
  return _codac.type_get_class(*args)
type_get_class = _codac.type_get_class

def type_get_read_type(*args):
  return _codac.type_get_read_type(*args)
type_get_read_type = _codac.type_get_read_type

def type_get_string_length(*args):
  return _codac.type_get_string_length(*args)
type_get_string_length = _codac.type_get_string_length

def type_get_bit_size(*args):
  return _codac.type_get_bit_size(*args)
type_get_bit_size = _codac.type_get_bit_size

def type_get_name(*args):
  return _codac.type_get_name(*args)
type_get_name = _codac.type_get_name

def type_get_description(*args):
  return _codac.type_get_description(*args)
type_get_description = _codac.type_get_description

def type_get_unit(*args):
  return _codac.type_get_unit(*args)
type_get_unit = _codac.type_get_unit

def type_get_fixed_value(*args):
  return _codac.type_get_fixed_value(*args)
type_get_fixed_value = _codac.type_get_fixed_value

def type_get_attributes(*args):
  return _codac.type_get_attributes(*args)
type_get_attributes = _codac.type_get_attributes

def type_get_num_record_fields(*args):
  return _codac.type_get_num_record_fields(*args)
type_get_num_record_fields = _codac.type_get_num_record_fields

def type_get_record_field_index_from_name(*args):
  return _codac.type_get_record_field_index_from_name(*args)
type_get_record_field_index_from_name = _codac.type_get_record_field_index_from_name

def type_get_record_field_index_from_real_name(*args):
  return _codac.type_get_record_field_index_from_real_name(*args)
type_get_record_field_index_from_real_name = _codac.type_get_record_field_index_from_real_name

def type_get_record_field_type(*args):
  return _codac.type_get_record_field_type(*args)
type_get_record_field_type = _codac.type_get_record_field_type

def type_get_record_field_name(*args):
  return _codac.type_get_record_field_name(*args)
type_get_record_field_name = _codac.type_get_record_field_name

def type_get_record_field_real_name(*args):
  return _codac.type_get_record_field_real_name(*args)
type_get_record_field_real_name = _codac.type_get_record_field_real_name

def type_get_record_field_hidden_status(*args):
  return _codac.type_get_record_field_hidden_status(*args)
type_get_record_field_hidden_status = _codac.type_get_record_field_hidden_status

def type_get_record_field_available_status(*args):
  return _codac.type_get_record_field_available_status(*args)
type_get_record_field_available_status = _codac.type_get_record_field_available_status

def type_get_record_union_status(*args):
  return _codac.type_get_record_union_status(*args)
type_get_record_union_status = _codac.type_get_record_union_status

def type_get_array_num_dims(*args):
  return _codac.type_get_array_num_dims(*args)
type_get_array_num_dims = _codac.type_get_array_num_dims

def type_get_array_dim(*args):
  return _codac.type_get_array_dim(*args)
type_get_array_dim = _codac.type_get_array_dim

def type_get_array_base_type(*args):
  return _codac.type_get_array_base_type(*args)
type_get_array_base_type = _codac.type_get_array_base_type

def type_get_special_type(*args):
  return _codac.type_get_special_type(*args)
type_get_special_type = _codac.type_get_special_type

def type_get_special_base_type(*args):
  return _codac.type_get_special_base_type(*args)
type_get_special_base_type = _codac.type_get_special_base_type

def cursor_set_product(*args):
  return _codac.cursor_set_product(*args)
cursor_set_product = _codac.cursor_set_product

def cursor_goto(*args):
  return _codac.cursor_goto(*args)
cursor_goto = _codac.cursor_goto

def cursor_goto_first_record_field(*args):
  return _codac.cursor_goto_first_record_field(*args)
cursor_goto_first_record_field = _codac.cursor_goto_first_record_field

def cursor_goto_next_record_field(*args):
  return _codac.cursor_goto_next_record_field(*args)
cursor_goto_next_record_field = _codac.cursor_goto_next_record_field

def cursor_goto_record_field_by_index(*args):
  return _codac.cursor_goto_record_field_by_index(*args)
cursor_goto_record_field_by_index = _codac.cursor_goto_record_field_by_index

def cursor_goto_record_field_by_name(*args):
  return _codac.cursor_goto_record_field_by_name(*args)
cursor_goto_record_field_by_name = _codac.cursor_goto_record_field_by_name

def cursor_goto_available_union_field(*args):
  return _codac.cursor_goto_available_union_field(*args)
cursor_goto_available_union_field = _codac.cursor_goto_available_union_field

def cursor_goto_first_array_element(*args):
  return _codac.cursor_goto_first_array_element(*args)
cursor_goto_first_array_element = _codac.cursor_goto_first_array_element

def cursor_goto_next_array_element(*args):
  return _codac.cursor_goto_next_array_element(*args)
cursor_goto_next_array_element = _codac.cursor_goto_next_array_element

def cursor_goto_array_element(*args):
  return _codac.cursor_goto_array_element(*args)
cursor_goto_array_element = _codac.cursor_goto_array_element

def cursor_goto_array_element_by_index(*args):
  return _codac.cursor_goto_array_element_by_index(*args)
cursor_goto_array_element_by_index = _codac.cursor_goto_array_element_by_index

def cursor_goto_attributes(*args):
  return _codac.cursor_goto_attributes(*args)
cursor_goto_attributes = _codac.cursor_goto_attributes

def cursor_goto_root(*args):
  return _codac.cursor_goto_root(*args)
cursor_goto_root = _codac.cursor_goto_root

def cursor_goto_parent(*args):
  return _codac.cursor_goto_parent(*args)
cursor_goto_parent = _codac.cursor_goto_parent

def cursor_use_base_type_of_special_type(*args):
  return _codac.cursor_use_base_type_of_special_type(*args)
cursor_use_base_type_of_special_type = _codac.cursor_use_base_type_of_special_type

def cursor_has_ascii_content(*args):
  return _codac.cursor_has_ascii_content(*args)
cursor_has_ascii_content = _codac.cursor_has_ascii_content

def cursor_has_attributes(*args):
  return _codac.cursor_has_attributes(*args)
cursor_has_attributes = _codac.cursor_has_attributes

def cursor_get_string_length(*args):
  return _codac.cursor_get_string_length(*args)
cursor_get_string_length = _codac.cursor_get_string_length

def cursor_get_bit_size(*args):
  return _codac.cursor_get_bit_size(*args)
cursor_get_bit_size = _codac.cursor_get_bit_size

def cursor_get_byte_size(*args):
  return _codac.cursor_get_byte_size(*args)
cursor_get_byte_size = _codac.cursor_get_byte_size

def cursor_get_num_elements(*args):
  return _codac.cursor_get_num_elements(*args)
cursor_get_num_elements = _codac.cursor_get_num_elements

def cursor_get_product_file(*args):
  return _codac.cursor_get_product_file(*args)
cursor_get_product_file = _codac.cursor_get_product_file

def cursor_get_depth(*args):
  return _codac.cursor_get_depth(*args)
cursor_get_depth = _codac.cursor_get_depth

def cursor_get_index(*args):
  return _codac.cursor_get_index(*args)
cursor_get_index = _codac.cursor_get_index

def cursor_get_file_bit_offset(*args):
  return _codac.cursor_get_file_bit_offset(*args)
cursor_get_file_bit_offset = _codac.cursor_get_file_bit_offset

def cursor_get_file_byte_offset(*args):
  return _codac.cursor_get_file_byte_offset(*args)
cursor_get_file_byte_offset = _codac.cursor_get_file_byte_offset

def cursor_get_format(*args):
  return _codac.cursor_get_format(*args)
cursor_get_format = _codac.cursor_get_format

def cursor_get_type_class(*args):
  return _codac.cursor_get_type_class(*args)
cursor_get_type_class = _codac.cursor_get_type_class

def cursor_get_read_type(*args):
  return _codac.cursor_get_read_type(*args)
cursor_get_read_type = _codac.cursor_get_read_type

def cursor_get_special_type(*args):
  return _codac.cursor_get_special_type(*args)
cursor_get_special_type = _codac.cursor_get_special_type

def cursor_get_type(*args):
  return _codac.cursor_get_type(*args)
cursor_get_type = _codac.cursor_get_type

def cursor_get_record_field_index_from_name(*args):
  return _codac.cursor_get_record_field_index_from_name(*args)
cursor_get_record_field_index_from_name = _codac.cursor_get_record_field_index_from_name

def cursor_get_record_field_available_status(*args):
  return _codac.cursor_get_record_field_available_status(*args)
cursor_get_record_field_available_status = _codac.cursor_get_record_field_available_status

def cursor_get_available_union_field_index(*args):
  return _codac.cursor_get_available_union_field_index(*args)
cursor_get_available_union_field_index = _codac.cursor_get_available_union_field_index

def cursor_get_array_dim(*args):
  return _codac.cursor_get_array_dim(*args)
cursor_get_array_dim = _codac.cursor_get_array_dim

def cursor_read_int8(*args):
  return _codac.cursor_read_int8(*args)
cursor_read_int8 = _codac.cursor_read_int8

def cursor_read_uint8(*args):
  return _codac.cursor_read_uint8(*args)
cursor_read_uint8 = _codac.cursor_read_uint8

def cursor_read_int16(*args):
  return _codac.cursor_read_int16(*args)
cursor_read_int16 = _codac.cursor_read_int16

def cursor_read_uint16(*args):
  return _codac.cursor_read_uint16(*args)
cursor_read_uint16 = _codac.cursor_read_uint16

def cursor_read_int32(*args):
  return _codac.cursor_read_int32(*args)
cursor_read_int32 = _codac.cursor_read_int32

def cursor_read_uint32(*args):
  return _codac.cursor_read_uint32(*args)
cursor_read_uint32 = _codac.cursor_read_uint32

def cursor_read_int64(*args):
  return _codac.cursor_read_int64(*args)
cursor_read_int64 = _codac.cursor_read_int64

def cursor_read_uint64(*args):
  return _codac.cursor_read_uint64(*args)
cursor_read_uint64 = _codac.cursor_read_uint64

def cursor_read_float(*args):
  return _codac.cursor_read_float(*args)
cursor_read_float = _codac.cursor_read_float

def cursor_read_double(*args):
  return _codac.cursor_read_double(*args)
cursor_read_double = _codac.cursor_read_double

def cursor_read_char(*args):
  return _codac.cursor_read_char(*args)
cursor_read_char = _codac.cursor_read_char

def cursor_read_string(*args):
  return _codac.cursor_read_string(*args)
cursor_read_string = _codac.cursor_read_string

def cursor_read_complex_double_split(*args):
  return _codac.cursor_read_complex_double_split(*args)
cursor_read_complex_double_split = _codac.cursor_read_complex_double_split

def expression_from_string(*args):
  return _codac.expression_from_string(*args)
expression_from_string = _codac.expression_from_string

def expression_get_type(*args):
  return _codac.expression_get_type(*args)
expression_get_type = _codac.expression_get_type

def expression_eval_bool(*args):
  return _codac.expression_eval_bool(*args)
expression_eval_bool = _codac.expression_eval_bool

def expression_eval_integer(*args):
  return _codac.expression_eval_integer(*args)
expression_eval_integer = _codac.expression_eval_integer

def expression_eval_float(*args):
  return _codac.expression_eval_float(*args)
expression_eval_float = _codac.expression_eval_float

def expression_eval_string(*args):
  return _codac.expression_eval_string(*args)
expression_eval_string = _codac.expression_eval_string

def expression_eval_node(*args):
  return _codac.expression_eval_node(*args)
expression_eval_node = _codac.expression_eval_node
# wrap expression eval functions such that the cursor argument becomes optional
def expression_eval_bool(expr, cursor=None):
    return _codac.expression_eval_bool(expr, cursor)
def expression_eval_integer(expr, cursor=None):
    return _codac.expression_eval_integer(expr, cursor)
def expression_eval_double(expr, cursor=None):
    return _codac.expression_eval_double(expr, cursor)
def expression_eval_string(expr, cursor=None):
    return _codac.expression_eval_string(expr, cursor)

# This file is compatible with both classic and new-style classes.


