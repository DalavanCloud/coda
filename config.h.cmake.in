/* config.h.cmake.in - Generated by ./cmakeify-dot-infiles.pl from config.h.in. */
/* config.h.in.  Generated from configure.ac by autoheader.  */


#ifndef CODA_CONFIG_H
#define CODA_CONFIG_H


/* This is the current version of coda */
#define CODA_VERSION "0.1"

/* Define to 1 if HDF4 Vdata/Vgroup attributes can be used (only enable if
   CODA is linked against HDF4 library version 4.2r2 or higher). */
#cmakedefine ENABLE_HDF4_VDATA_ATTRIBUTES ${ENABLE_HDF4_VDATA_ATTRIBUTES}

/* Define to 1 if you have the `bcopy' function. */
#cmakedefine HAVE_BCOPY ${HAVE_BCOPY}

/* Define to 1 if you have the <dirent.h> header file. */
#cmakedefine HAVE_DIRENT_H ${HAVE_DIRENT_H}

/* Define to 1 if you have the <dlfcn.h> header file. */
#cmakedefine HAVE_DLFCN_H ${HAVE_DLFCN_H}

/* Define to 1 if you have the <export.h> header file. */
#cmakedefine HAVE_EXPORT_H ${HAVE_EXPORT_H}

/* Define to 1 if you have the `floor' function. */
#cmakedefine HAVE_FLOOR ${HAVE_FLOOR}

/* Define to 1 if you have the `getpagesize' function. */
#cmakedefine HAVE_GETPAGESIZE ${HAVE_GETPAGESIZE}

/* Define to 1 if HDF4 is available. */
#cmakedefine HAVE_HDF4 ${HAVE_HDF4}

/* Define to 1 if HDF5 is available. */
#cmakedefine HAVE_HDF5 ${HAVE_HDF5}

/* Define to 1 if you have the <hdf5.h> header file. */
#cmakedefine HAVE_HDF5_H ${HAVE_HDF5_H}

/* Define to 1 if you have the <hdf.h> header file. */
#cmakedefine HAVE_HDF_H ${HAVE_HDF_H}

/* Define to 1 if your IDL version supports the IDL_SYSFUN_DEF2 type. */
#cmakedefine HAVE_IDL_SYSFUN_DEF2 ${HAVE_IDL_SYSFUN_DEF2}

/* Define to 1 if your IDL version supports the IDL_SYSRTN_UNION type. */
#cmakedefine HAVE_IDL_SYSRTN_UNION ${HAVE_IDL_SYSRTN_UNION}

/* Define to 1 if you have the <inttypes.h> header file. */
#cmakedefine HAVE_INTTYPES_H ${HAVE_INTTYPES_H}

/* Define to 1 if you have the `m' library (-lm). */
#cmakedefine HAVE_LIBM ${HAVE_LIBM}

/* Define to 1 if you have the `SystemStubs' library (-lSystemStubs). */
#cmakedefine HAVE_LIBSYSTEMSTUBS ${HAVE_LIBSYSTEMSTUBS}

/* Define to 1 if your system has a GNU libc compatible `malloc' function, and
   to 0 otherwise. */
#cmakedefine HAVE_MALLOC ${HAVE_MALLOC}

/* Define to 1 if you have the `memmove' function. */
#cmakedefine HAVE_MEMMOVE ${HAVE_MEMMOVE}

/* Define to 1 if you have the <memory.h> header file. */
#cmakedefine HAVE_MEMORY_H ${HAVE_MEMORY_H}

/* Define to 1 if you have the <mex.h> header file. */
#cmakedefine HAVE_MEX_H ${HAVE_MEX_H}

/* Define to 1 if you have the <mfhdf.h> header file. */
#cmakedefine HAVE_MFHDF_H ${HAVE_MFHDF_H}

/* Define to 1 if you have a working `mmap' system call. */
#cmakedefine HAVE_MMAP ${HAVE_MMAP}

/* Define to 1 if matlab has the mxCreateDoubleScalar function. */
#cmakedefine HAVE_MXCREATEDOUBLESCALAR ${HAVE_MXCREATEDOUBLESCALAR}

/* Define to 1 if matlab has the mxCreateNumericMatrix function. */
#cmakedefine HAVE_MXCREATENUMERICMATRIX ${HAVE_MXCREATENUMERICMATRIX}

/* Define to 1 if you have the <netcdf.h> header file. */
#cmakedefine HAVE_NETCDF_H ${HAVE_NETCDF_H}

/* Define to 1 if you have the `pread' function. */
#cmakedefine HAVE_PREAD ${HAVE_PREAD}

/* Define to 1 if your system has a GNU libc compatible `realloc' function,
   and to 0 otherwise. */
#cmakedefine HAVE_REALLOC ${HAVE_REALLOC}

/* Define to 1 if you have the `stat' function. */
#cmakedefine HAVE_STAT ${HAVE_STAT}

/* Define to 1 if you have the <stdint.h> header file. */
#cmakedefine HAVE_STDINT_H ${HAVE_STDINT_H}

/* Define to 1 if you have the <stdlib.h> header file. */
#cmakedefine HAVE_STDLIB_H ${HAVE_STDLIB_H}

/* Define to 1 if you have the `strcasecmp' function. */
#cmakedefine HAVE_STRCASECMP ${HAVE_STRCASECMP}

/* Define to 1 if you have the `strdup' function. */
#cmakedefine HAVE_STRDUP ${HAVE_STRDUP}

/* Define to 1 if you have the <strings.h> header file. */
#cmakedefine HAVE_STRINGS_H ${HAVE_STRINGS_H}

/* Define to 1 if you have the <string.h> header file. */
#cmakedefine HAVE_STRING_H ${HAVE_STRING_H}

/* Define to 1 if you have the `strncasecmp' function. */
#cmakedefine HAVE_STRNCASECMP ${HAVE_STRNCASECMP}

/* Define to 1 if you have the <sys/mman.h> header file. */
#cmakedefine HAVE_SYS_MMAN_H ${HAVE_SYS_MMAN_H}

/* Define to 1 if you have the <sys/stat.h> header file. */
#cmakedefine HAVE_SYS_STAT_H ${HAVE_SYS_STAT_H}

/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine HAVE_SYS_TYPES_H ${HAVE_SYS_TYPES_H}

/* Define to 1 if you have the <unistd.h> header file. */
#cmakedefine HAVE_UNISTD_H ${HAVE_UNISTD_H}

/* Define to 1 if you have the `vsnprintf' function. */
#cmakedefine HAVE_VSNPRINTF ${HAVE_VSNPRINTF}

/* Define to 1 if zlib is available. */
#cmakedefine HAVE_ZLIB ${HAVE_ZLIB}

/* Define to 1 if you have the <zlib.h> header file. */
#cmakedefine HAVE_ZLIB_H ${HAVE_ZLIB_H}

/* Define to 1 if your C compiler doesn't accept -c and -o together. */
#cmakedefine NO_MINUS_C_MINUS_O ${NO_MINUS_C_MINUS_O}

/* Name of package */
#define PACKAGE "coda"

/* Define to the address where bug reports for this package should be sent. */
#define PACKAGE_BUGREPORT ""

/* Define to the full name of this package. */
#define PACKAGE_NAME "CODA"

/* Define to the full name and version of this package. */
#define PACKAGE_STRING "CODA 0.1"

/* Define to the one symbol short name of this package. */
#define PACKAGE_TARNAME "coda"

/* Define to the version of this package. */
#define PACKAGE_VERSION "0.1"

/* Define to the compiler attribute to test for printf format compliance */
#cmakedefine PRINTF_ATTR ${PRINTF_ATTR}

/* Define to 1 if you have the ANSI C header files. */
#cmakedefine STDC_HEADERS ${STDC_HEADERS}

/* Define to 1 if your <sys/time.h> declares `struct tm'. */
#cmakedefine TM_IN_SYS_TIME ${TM_IN_SYS_TIME}

/* Version number of package */
#define VERSION "0.1"

/* Define to 1 if your processor stores words with the most significant byte
   first (like Motorola and SPARC, unlike Intel and VAX). */
#cmakedefine WORDS_BIGENDIAN ${WORDS_BIGENDIAN}

/* Define to 1 if your Fortran compiler adds an additional underscore to an
   identifier in the object file if the identifier contains an underscore. */
#cmakedefine WRAPFORTRAN_USE_ADDITIONAL_UNDERSCORE ${WRAPFORTRAN_USE_ADDITIONAL_UNDERSCORE}

/* Define to 1 if your Fortran compiler generates object files containing
   uppercase identifiers. */
#cmakedefine WRAPFORTRAN_USE_UPPERCASE_IDENTIFIERS ${WRAPFORTRAN_USE_UPPERCASE_IDENTIFIERS}

/* Define to specify how much context to retain around the current parse
   point. */
#cmakedefine XML_CONTEXT_BYTES ${XML_CONTEXT_BYTES}

/* Define to make parameter entity parsing functionality available. */
#cmakedefine XML_DTD ${XML_DTD}

/* Define to set the size of the XML_Size and XML_Index integer types to be at
   least 64 bits in size. */
#cmakedefine XML_LARGE_SIZE ${XML_LARGE_SIZE}

/* Define to make XML Namespaces functionality available. */
#cmakedefine XML_NS ${XML_NS}

/* Define to 1 if `lex' declares `yytext' as a `char *' by default, not a
   `char[]'. */
#cmakedefine YYTEXT_POINTER ${YYTEXT_POINTER}

/* Number of bits in a file offset, on hosts where this is settable. */
#cmakedefine _FILE_OFFSET_BITS ${_FILE_OFFSET_BITS}

/* Define for large files, on AIX-style hosts. */
#cmakedefine _LARGE_FILES ${_LARGE_FILES}

/* Define for Solaris 2.5.1 so the uint32_t typedef from <sys/synch.h>,
   <pthread.h>, or <semaphore.h> is not used. If the typedef was allowed, the
   #define below would cause a syntax error. */
#cmakedefine _UINT32_T ${_UINT32_T}

/* Define for Solaris 2.5.1 so the uint64_t typedef from <sys/synch.h>,
   <pthread.h>, or <semaphore.h> is not used. If the typedef was allowed, the
   #define below would cause a syntax error. */
#cmakedefine _UINT64_T ${_UINT64_T}

/* Define for Solaris 2.5.1 so the uint8_t typedef from <sys/synch.h>,
   <pthread.h>, or <semaphore.h> is not used. If the typedef was allowed, the
   #define below would cause a syntax error. */
#cmakedefine _UINT8_T ${_UINT8_T}

/* Define to the type of a signed integer type of width exactly 16 bits if
   such a type exists and the standard includes do not define it. */
#cmakedefine int16_t ${int16_t}

/* Define to the type of a signed integer type of width exactly 32 bits if
   such a type exists and the standard includes do not define it. */
#cmakedefine int32_t ${int32_t}

/* Define to the type of a signed integer type of width exactly 64 bits if
   such a type exists and the standard includes do not define it. */
#cmakedefine int64_t ${int64_t}

/* Define to the type of a signed integer type of width exactly 8 bits if such
   a type exists and the standard includes do not define it. */
#cmakedefine int8_t ${int8_t}

/* Define to rpl_malloc if the replacement function should be used. */
#cmakedefine malloc ${malloc}

/* Define to replacement_mxCreateDoubleScalar if HAVE_MXCREATEDOUBLESCALAR is
   not set. */
#cmakedefine mxCreateDoubleScalar ${mxCreateDoubleScalar}

/* Define to replacement_mxCreateNumericMatrix if HAVE_MXCREATENUMERICMATRIX
   is not set. */
#cmakedefine mxCreateNumericMatrix ${mxCreateNumericMatrix}

/* Define to rpl_realloc if the replacement function should be used. */
#cmakedefine realloc ${realloc}

/* Define to `unsigned int' if <sys/types.h> does not define. */
#cmakedefine HAVE_SIZE_T ${HAVE_SIZE_T}
#if !defined(HAVE_SIZE_T)
#define size_t @SIZE_T@
#endif

/* Define to the type of an unsigned integer type of width exactly 16 bits if
   such a type exists and the standard includes do not define it. */
#cmakedefine uint16_t ${uint16_t}

/* Define to the type of an unsigned integer type of width exactly 32 bits if
   such a type exists and the standard includes do not define it. */
#cmakedefine uint32_t ${uint32_t}

/* Define to the type of an unsigned integer type of width exactly 64 bits if
   such a type exists and the standard includes do not define it. */
#cmakedefine uint64_t ${uint64_t}

/* Define to the type of an unsigned integer type of width exactly 8 bits if
   such a type exists and the standard includes do not define it. */
#cmakedefine uint8_t ${uint8_t}


#ifdef HAVE_PREAD
/* some platforms (e.g. Linux) require this definition in order to enable support for pread */
#define _XOPEN_SOURCE 500
#endif

#ifdef HAVE_INTTYPES_H
#include <inttypes.h>
#else
# ifdef HAVE_STDINT_H
#  include <stdint.h>
# else
#  ifdef HAVE_SYS_TYPES_H
#   include <sys/types.h>
#  endif
# endif
#endif

#ifndef HAVE_STRDUP
char *strdup(const char *);
#endif

#ifndef HAVE_STRCASECMP
int strcasecmp(const char *, const char *);
#endif

#if !defined(HAVE_STRNCASECMP) || !defined(HAVE_VSNPRINTF)
/* include string.h for size_t definition */
#include <string.h>
#endif

#ifndef HAVE_STRNCASECMP
int strncasecmp(const char *, const char *, size_t);
#endif

#if defined(HAVE_STRCASECMP) || defined(HAVE_STRNCASECMP)
#ifdef HAVE_STRINGS_H
/* include strings.h for definition of strcasecmp and strncasecmp */
#include <strings.h>
#endif
#endif

#ifndef HAVE_VSNPRINTF
/* include stdarg.h for va_list definition */
#include <stdarg.h>
int vsnprintf(const char *, size_t, const char *, va_list ap);
#endif

#ifdef WIN32
#include "../win32/config.h"
#endif

#endif /* !defined(CODA_CONFIG_H) */

